<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

	<!-- This is the implementation of the calc interface being tested.  The "good" calc has all unit
	tests pass, while the "bad" calc has all unit tests fail. -->
	<bean id="realCalc" class="com.aa.selfservice.cs.scratchpad.GoodCalc" />
	
	<!-- Declare an advice bean -->
	<bean id="doSomethingAdvice" class="com.aa.selfservice.cs.scratchpad.aop.DoSomethingAdvice" />
	
	<!-- Create an advisor that interprets any method matching the specified regex as a pointcut.
	The regex matches any method name with two "d" characters.
	A pointcut is an opportunity to use the advice to augment the behaviors of the method. -->
	<bean id="calcAdvisor"
		class="org.springframework.aop.support.RegexpMethodPointcutAdvisor">
		<property name="patterns">
			<list>
				<value>.*(d\w*d).*</value>
			</list>
		</property>
 
		<property name="advice" ref="doSomethingAdvice" />
	</bean>	
	
	<!-- Create a proxy of the calc interface that uses the calc advisor to apply new aspects
	to the real calc bean.  When retrieving the "calc" bean from the Spring context, it will
	have new aspects.  The unit test fixture will retrieve the "calc" bean before each unit test, therefore
	some unit tests will invoke the advice. -->	
	<bean id="calc"
		class = "org.springframework.aop.framework.ProxyFactoryBean">
		<property name="target" ref="realCalc" />
		<property name="interceptorNames">
			<list>
				<value>calcAdvisor</value>
			</list>
		</property>
	</bean>
</beans>
